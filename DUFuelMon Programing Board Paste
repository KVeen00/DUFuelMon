{"slots":{"0":{"name":"s1","type":{"events":[],"methods":[]}},"1":{"name":"s2","type":{"events":[],"methods":[]}},"2":{"name":"s3","type":{"events":[],"methods":[]}},"3":{"name":"s4","type":{"events":[],"methods":[]}},"4":{"name":"s5","type":{"events":[],"methods":[]}},"5":{"name":"s6","type":{"events":[],"methods":[]}},"6":{"name":"s7","type":{"events":[],"methods":[]}},"7":{"name":"s8","type":{"events":[],"methods":[]}},"8":{"name":"s9","type":{"events":[],"methods":[]}},"9":{"name":"s10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--UNIT START CODE\nunit.hide()\ndisplayTime = true --export Display update clock\ntimeOffset = 1 --export timezone offset factor\ntimemode12 = false --export time display in 12 hour time\nuseHUD = true --export enable/disable HUD when Board id directly activated\nfuel_xpos = 8 --export fuel HUD x postion\nfuel_ypos = 15 --export fuel HUD y postion\nfuel_size = 1.5 --export fuel HUD scaling\nWarnPoint = 50 --export\nCriticalPoint = 25 --export\nopacity = 1 --export value from 0-1\nHUDFont = system.getScreenWidth()/3840\ntankListN = {}\ntankListK = {}\nscreenList = {}\ndbList = {}\nattachedList = {}\n\n\nlocal i = 1\nif s1 ~= nil then attachedList[i] = s1 i=i+1 end\nif s2 ~= nil then attachedList[i] = s2 i=i+1 end\nif s3 ~= nil then attachedList[i] = s3 i=i+1 end\nif s4 ~= nil then attachedList[i] = s4 i=i+1 end\nif s5 ~= nil then attachedList[i] = s5 i=i+1 end\nif s6 ~= nil then attachedList[i] = s6 i=i+1 end\nif s7 ~= nil then attachedList[i] = s7 i=i+1 end\nif s8 ~= nil then attachedList[i] = s8 i=i+1 end\nif s9 ~= nil then attachedList[i] = s9 i=i+1 end\nif s10 ~= nil then attachedList[i] = s10 end\n\nif db~=nil then db.setIntValue(\"KCORFuelMonTankNumber\",#attachedList) end\nfunction makeTime(offset)\n\ttick = system.getTime()\n\ttick = tick%86400\n\th = math.floor(tick/3600)+offset\n     if timemode12==true and h>12 then h=h-12 end\n\ttick = tick%3600\n\tm = math.floor(tick/60)\n\ttick = tick%60\n\ts = math.floor(tick)\n\tif m < 10 then m=\"0\"..m end\n\tif s < 10 then s=\"0\"..s end\n\treturnTime = h..\":\"..m..\":\"..s\n\treturn returnTime\nend\nfunction parseAttached(attachedList)\n    for i,v in ipairs(attachedList) do\n        eclass=v.getElementClass()\n        if eclass==\"DataBankUnit\" then dbList[#dbList+1]=v \n        elseif eclass==\"AtmoFuelContainer\" then tankListN[#tankListN+1]=v \n        elseif eclass==\"SpaceFuelContainer\" then tankListK[#tankListK+1]=v \n        elseif eclass==\"ScreenUnit\" then screenList[#screenList+1]=v \n        end\n    end\nend\nparseAttached(attachedList)\n\nfunction writeDBString(keyname, keyval)\n        for i,v in ipairs(dbList) do\n        v.setStringValue(keyname, keyval)\n        end         \nend\n\nfunction writeDBInt(keyname, keyval)\n        for i,v in ipairs(dbList) do\n        v.setIntValue(keyname, keyval)\n        end         \nend\n\nwriteDBInt(\"KCORFuelMonTankNumber\",#tankListN+#tankListK)\nwriteDBInt(\"KCORFuelMonNumNitron\",#tankListN)\nwriteDBInt(\"KCORFuelMonNumKergon\",#tankListK)\nwriteDBInt(\"KCORFuelMonNumScreens\",#screenList)\nwriteDBInt(\"KCORFuelMonNumDBs\",#dbList)\n\nNitronPad = 0\nKergonPad = 0\ndividePoint = 0\n\nfsize = 375\n\nfunction getTankData(tanklist)\n        returndata = \"\"\n        for i,v in ipairs(tanklist) do\n            local p = json.decode(v.getData()).percentage or 0\n            returndata = returndata..p..[[,]]\n        end\n        returndata = returndata\n        return returndata\nend\n\n\n\n\nfunction svgInit(numNitron, numKergon, status)\n        \n        local returnsvg = [[<div>\n\n                <svg height=\"100%\" width=\"100%\">\n                \n                <g fill=\"none\" stroke=\"white\" stroke-width=\"0.5%\" font-weight=\"bold\" font-size=\"]]..fsize..[[%\" opacity=\"1\" ><rect x=\"0\" y=\"0\" rx=\"5%\" ry=\"5%\" width=\"100%\" height=\"100%\" opacity=\".5\" fill=\"gray\" stroke=\"blue\" />]]   \n\n        if numNitron > 0 and numKergon == 0 then\n                dividePoint = 100\n                NitronPad = dividePoint/(3*numNitron + 1)\n                returnsvg=returnsvg..[[<text x=\"5%\" y=\"6%\" text-anchor=\"start\"  fill=\"white\">]]..status..[[</text>]]\n                \n                returnsvg = returnsvg..[[<text x=\"50%\" y=\"6%\"  text-anchor=\"middle\"  fill=\"blue\">NITRON FUEL</text>]]\n                for i = 1, numNitron, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"88%\" fill=\"none\" stroke=\"blue\" opacity=\"]]..opacity..[[\" />]]   \n\n                end\n        elseif numNitron > 0 and numKergon > 0 then\n                dividePoint = (100/(numNitron + numKergon))*numNitron\n                returnsvg=returnsvg..[[<text x=\"50%\" y=\"6%\" text-anchor=\"start\"  fill=\"white\">]]..status..[[</text>]]\n                \n                returnsvg = returnsvg..[[<line x1=\"]]..dividePoint..[[%\" x2=\"]]..dividePoint..[[%\" y1=\"10%\" y2=\"100%\" stroke=\"white\"  opacity=\"]]..opacity..[[\" />]]            \n                returnsvg = returnsvg..[[<text x=\"]]..(dividePoint/2)..[[%\" y=\"6%\" text-anchor=\"middle\" fill=\"blue\">NITRON</text>]]\n                returnsvg = returnsvg..[[<text x=\"]]..(dividePoint+((100-dividePoint)/2))..[[%\" y=\"6%\"  text-anchor=\"middle\" stroke=\"blue\"  fill=\"yellow\">KERGON</text>]]\n                NitronPad = dividePoint/(3*numNitron + 1)\n                for i = 1, numNitron, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"88%\" stroke=\"blue\" fill=\"none\" opacity=\"]]..opacity..[[\"/>]]   \n\n                end\n                KergonPad = (100-dividePoint)/(3*numKergon + 1)\n                for i = 1, numKergon, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..dividePoint + KergonPad*i+2*KergonPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*KergonPad..[[%\" height=\"88%\" stroke=\"yellow\" fill=\"none\" opacity=\"]]..opacity..[[\"/>]]   \n                end\n        elseif numNitron == 0 and numKergon > 0 then\n                dividePoint = 0\n                returnsvg=returnsvg..[[<text x=\"5%\" y=\"6%\" text-anchor=\"start\"  fill=\"white\">]]..status..[[</text>]]\n                \n                returnsvg = returnsvg..[[<text x=\"50%\" y=\"5%\"  text-anchor=\"middle\" stroke=\"blue\"  fill=\"yellow\">KERGON FUEL</text>]]\n                                local padwidth = 50/(3*numNitron + 1)\n                KergonPad = (100-dividePoint)/(3*numKergon + 1)\n                for i = 1, numKergon, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..KergonPad*i+2*KergonPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*KergonPad..[[%\" height=\"88%\" stroke=\"yellow\" fill=\"none\" opacity=\"]]..opacity..[[\"/>]]   \n                end\n        else\n        returnsvg = returnsvg..[[</g>]]\n        \n        end\n    return returnsvg    \nend\n\n\nfunction drawTankLevels(nlist, klist)\n         local returnsvg = [[<g fill=\"none\" stroke-width=\"0.5%\" font-size=\"]]..(fsize/5)..[[%\" opacity=\"]]..opacity..[[\"  >]]\n        for i,v in ipairs(nlist) do\n                local tankpercent = json.decode(v.getData()).percentage or 0\n                fillColor = \"blue\"\n                kfillColor = \"yellow\"\n                if tankpercent <= CriticalPoint then\n                        fillColor = \"red\"\n                        kfillColor = \"red\"\n                elseif tankpercent > CriticalPoint and tankpercent <= WarnPoint then\n                        fillColor = \"orange\"\n                        kfillColor = \"orange\"\n                else\n                end\n                returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"]]..(96-((tankpercent/100)*88))..[[%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"]]..(((tankpercent/100)*88))..[[%\" fill=\"]]..fillColor..[[\" stroke=\"none\"/>]]---]]..fillColor..[[\"/>]]\n                returnsvg = returnsvg..[[<text x=\"]]..NitronPad*i+2*NitronPad*(i-1)+NitronPad..[[%\" y=\"]]..(96-((tankpercent/200)*88))..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"white\">]]..tankpercent..[[%</text>]]\n        end\n        for i,v in ipairs(klist) do\n                local tankpercent = json.decode(v.getData()).percentage or 0\n                fillColor = \"blue\"\n                kfillColor = \"yellow\"\n                if tankpercent <= CriticalPoint then\n                        fillColor = \"red\"\n                        kfillColor = \"red\"\n                elseif tankpercent > CriticalPoint and tankpercent <= WarnPoint then\n                        fillColor = \"orange\"\n                        kfillColor = \"orange\"\n                else\n                end\n                returnsvg = returnsvg..[[<rect x=\"]]..dividePoint + KergonPad*(i)+2*KergonPad*((i)-1)..[[%\" y=\"]]..(96-((tankpercent/100)*88))..[[%\" rx=\"5%\" ry=\"5%\" width=\"]]..2*KergonPad..[[%\" height=\"]]..(((tankpercent/100)*88))..[[%\" fill=\"]]..kfillColor..[[\" stroke=\"none\"/>]]\n                    returnsvg = returnsvg..[[<text x=\"]]..dividePoint + KergonPad*(i)+2*KergonPad*((i)-1)+KergonPad..[[%\" y=\"]]..(96-((tankpercent/200)*88))..[[%\" text-anchor=\"middle\" stroke=\"black\" fill=\"blue\">]]..tankpercent..[[%</text>]]\n        end\n        returnsvg = returnsvg..[[</g></svg></div>]]\n        return returnsvg\nend\n\n\n\n\nfunction svgInitscaled(numNitron, numKergon)     \n        local returnsvg = [[<div style=\"\n            height:]]..(1.3*fuel_size*(numNitron+numKergon))..[[%;\n            width:]]..(fuel_size*(numNitron+numKergon))..[[%;\n            position:absolute;\n            top:]]..(fuel_ypos-(1.3*fuel_size*(numNitron+numKergon)/2))..[[%;\n            left:]]..(fuel_xpos-(fuel_size*(numNitron+numKergon)/2))..[[%;\n            text-align:center;\">\n\n                <svg height=\"100%\" width=\"100%\">\n                \n                <g fill=\"none\" stroke=\"white\" stroke-width=\"0.5%\" font-size=\"]]..(2*fuel_size*HUDFont*(numNitron+numKergon))..[[\" opacity=\"]]..opacity..[[\" ><rect x=\"0\" y=\"0\" rx=\"5%\" ry=\"5%\" width=\"100%\" height=\"100%\" fill=\"gray\" stroke=\"blue\" />]]   \n                \n\n        if numNitron > 0 and numKergon == 0 then\n                dividePoint = 100\n                NitronPad = dividePoint/(3*numNitron + 1)\n                if displayTime ==true then\n                returnsvg=returnsvg..[[<text x=\"5%\" y=\"6%\" text-anchor=\"start\"  fill=\"white\">]]..makeTime(timeOffset)..[[</text>]]\n                end\n                returnsvg = returnsvg..[[<text x=\"50%\" y=\"6%\" text-anchor=\"middle\"  fill=\"blue\">NITRON FUEL</text>]]\n                for i = 1, numNitron, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"88%\" fill=\"none\" stroke=\"blue\" opacity=\"]]..opacity..[[\" />]]   \n\n                end\n        elseif numNitron > 0 and numKergon > 0 then\n                dividePoint = (100/(numNitron + numKergon))*numNitron\n                if displayTime ==true then\n                returnsvg=returnsvg..[[<text x=\"50%\" y=\"6%\" text-anchor=\"middle\"  fill=\"white\">]]..makeTime(timeOffset)..[[</text>]]\n                end\n                returnsvg = returnsvg..[[<line x1=\"]]..dividePoint..[[%\" x2=\"]]..dividePoint..[[%\" y1=\"10%\" y2=\"100%\" stroke=\"white\"  opacity=\"]]..opacity..[[\" />]]            \n                returnsvg = returnsvg..[[<text x=\"]]..(dividePoint/2)..[[%\" y=\"6%\"  text-anchor=\"middle\"  fill=\"blue\">NITRON</text>]]\n                returnsvg = returnsvg..[[<text x=\"]]..(dividePoint+((100-dividePoint)/2))..[[%\" y=\"6%\" text-anchor=\"middle\" stroke=\"blue\"  fill=\"yellow\">KERGON</text>]]\n                NitronPad = dividePoint/(3*numNitron + 1)\n                for i = 1, numNitron, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..NitronPad*i+2*NitronPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*NitronPad..[[%\" height=\"88%\" stroke=\"blue\" fill=\"none\" opacity=\"]]..opacity..[[\"/>]]   \n\n                end\n                KergonPad = (100-dividePoint)/(3*numKergon + 1)\n                for i = 1, numKergon, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..dividePoint + KergonPad*i+2*KergonPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*KergonPad..[[%\" height=\"88%\" stroke=\"yellow\" fill=\"none\" opacity=\"]]..opacity..[[\"/>]]   \n                end\n        elseif numNitron == 0 and numKergon > 0 then\n                dividePoint = 0\n                if displayTime ==true then\n                returnsvg=returnsvg..[[<text x=\"5%\" y=\"6%\" text-anchor=\"start\"  fill=\"white\">]]..makeTime(timeOffset)..[[</text>]]\n                end\n                returnsvg = returnsvg..[[<text x=\"50%\" y=\"5%\"  text-anchor=\"middle\" stroke=\"blue\"  fill=\"yellow\">KERGON FUEL</text>]]\n                                local padwidth = 50/(3*numNitron + 1)\n                KergonPad = (100-dividePoint)/(3*numKergon + 1)\n                for i = 1, numKergon, 1\n                do\n                     returnsvg = returnsvg..[[<rect x=\"]]..KergonPad*i+2*KergonPad*(i-1)..[[%\" y=\"8%\" rx=\"5%\" ry=\"5%\"  width=\"]]..2*KergonPad..[[%\" height=\"88%\" stroke=\"yellow\" fill=\"none\" opacity=\"]]..opacity..[[\"/>]]   \n                end\n        else\n        returnsvg = returnsvg..[[</g>]]\n        return returnsvg\n        end\n    return returnsvg    \nend\n\nunit.setTimer(\"write\", 0.5)\ninit=true\nsystem.print(\"FuelMon Active\")\nwriteDBString(\"KCORFuelMonStat\",\"ON\")\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"--UNIT STOP CODE\n\nwriteDBString(\"KCORFuelMonStat\",\"OFF\")\nsystem.print(\"FuelMon Shutting Down...\")\nscreenHTML=\"\"\nif init==true then\n    screenHTML = svgInit(#tankListN, #tankListK, \"OFF\")..drawTankLevels(tankListN, tankListK)\n    for i,v in ipairs(screenList) do\n        v.setHTML(screenHTML)\n    end\nend\n\n\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"--TICK WRITE CODE\nif init == true then writeDBString(\"KCORFuelMonUpdateTime\" ,makeTime(1)) end\n\nif #tankListN>0 then\n    writeDBString(\"KCORFuelMonNitron\",getTankData(tankListN))\n    end\nif #tankListK>0 then\n    writeDBString(\"KCORFuelMonKergon\",getTankData(tankListK))\n    end\nscreenHTML=\"\"\nif init==true then\n    screenHTML = svgInit(#tankListN, #tankListK, \"ON\")..drawTankLevels(tankListN, tankListK)\n    for i,v in ipairs(screenList) do\n        v.setHTML(screenHTML)\n    end\nend\n\n\n","filter":{"args":[{"value":"write"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"--SYSTEM UPDATE CODE\nhudHTML=\"\"\nif init==true then\n    hudHTML = svgInitscaled(#tankListN, #tankListK)..drawTankLevels(tankListN, tankListK)\nend\nsystem.setScreen(hudHTML)\nif useHUD== true then system.showScreen(1) end","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"3"}],"methods":[],"events":[]}
